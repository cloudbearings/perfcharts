#!/bin/bash

# show usage of the script
show_usage() {
	local base_name=`basename $0`
	echo 'This tool is used to generate a Performance & Resource Monitoring Report.'
	echo "Usage: $base_name [OPTION...] [INPUT DIRECTORY]"
	echo 'Examples:'
	echo "	$base_name	# Generate a report from current directory"
	echo "	$base_name -z GMT+8	# Generate a report from current directory with specifying the time zone China Standard Time (GMT+8)"
	echo "	$base_name input/	# Generate a report from directory 'input/'"
	echo "	$base_name -d output/ -o report.html input/	# Generate report 'report.html' from 'input/', and place generated files into 'output/'"
	echo
	echo 'Options:'
	echo '	-d DIRECTORY	specify the output directory'
	echo "	-o FILE		the file name of generated report, default to 'report.html'"
	echo "	-z TIME_ZONE	specify the time zone, like 'GMT+8'"
	echo "	-f FROM_TIME	specify the start time of duration, like '2014-12-18 9:30:00'"
	echo "	-t TO_TIME	specify the end time of duration, like '2014-12-18 17:30:00'"
	echo "	-e EXCLUSION_PATTERN	specify the pattern (regular expression) which is used to exclude some transactions for average TPS & RT  calculation, like 'ping\.html'"
}

# initialize global variables
if ! [ -n "$CGT_HOME" ]; then export CGT_HOME=$(cd `dirname "$0"`; cd ..; pwd); fi
if ! [ -n "$CGT_LIB" ]; then export CGT_LIB=$CGT_HOME/lib; fi
if ! [ -n "$CGT_LOG" ]; then export CGT_LOG=$CGT_HOME/log; fi
if ! [ -n "$CGT_JAVA_COMMAND" ]; then export CGT_JAVA_COMMAND=java; fi
input_dir=\.
# deal with arguments
while getopts d:o:z:f:t:e:? opt; do
	case $opt in
	d) 
		output_dir=$OPTARG;;
	o) 
		report_file=$OPTARG;;
	z)
		time_zone=$OPTARG;;
	f)
		start_time=$OPTARG;;
	t)
		end_time=$OPTARG;;
	e)
		exclusion_pattern=$OPTARG;;
	?|*)	echo
		show_usage
		exit -1;;
	esac
done
shift $[$OPTIND - 1]
if [ -n "$1" ]; then
	input_dir=$1
fi

if ! [ -n "$output_dir" ]; then output_dir=$input_dir/output; fi
if ! [ -n "$report_file" ]; then report_file=$output_dir/report.html; fi

bin_dir=$CGT_HOME/bin
cgt_js=$bin_dir/cgt-js
cgt_monoreport=$bin_dir/cgt-monoreport
perftest_parser=$CGT_LIB/chartgeneration-perftest-parser.jar
perftest_generator=$CGT_LIB/chartgeneration-core.jar
jmeter_default_config_file=$CGT_HOME/res/jmeter.conf
rm_default_config_file=$CGT_HOME/res/res.template.conf
report_template=$CGT_HOME/res/report_mono.html

tmp_dir=$output_dir/tmp
jmeter_dir=$tmp_dir/jmeter
jmeter_data_table=$jmeter_dir/jmeter.csv
resource_monitoring_dir=$tmp_dir/resource_monitoring
json_dir=$tmp_dir/subreports
jmeter_json_file=$json_dir/Performance.json

# parse raw data to data tables
echo "remove tmp directory '$tmp_dir'" >&2
rm "$tmp_dir" -Rf
for file in "$input_dir"/*; do
if [ -f "$file" ]; then
	echo "parsing input file '$file'..." >&2
	file_base_name=`basename "$file"`
	file_extension=${file_base_name##*.}
	file_bare_name=${file_base_name%%.*}
	#echo ext of $file_base_name is $file_extension
	case $file_extension in
	load|nmon)
		server_name=${file_bare_name%%_*}
		mkdir -p "$resource_monitoring_dir"
		if [ "$file_extension" == "load" ]; then
			parser_class=CPULoadParser
		elif [ "$file_extension" == "nmon" ]; then
			parser_class=NMONParser
		fi
		#echo $CGT_JAVA_COMMAND "-DstartTime=$start_time" "-DendTime=$end_time" -jar "$perftest_parser" "$parser_class" "$time_zone" \< "$file" \>\> "$resource_monitoring_dir/$server_name.csv"
		if ! $CGT_JAVA_COMMAND "-DstartTime=$start_time" "-DendTime=$end_time" -jar "$perftest_parser" "$parser_class" "$time_zone" < "$file" >> "$resource_monitoring_dir/$server_name.csv"; then
			exit 1
		fi
		;;
	jtl)
		mkdir -p "$jmeter_dir"
		parser_class=JmeterParser
		if ! $CGT_JAVA_COMMAND "-DstartTime=$start_time" "-DendTime=$end_time" -jar "$perftest_parser" "$parser_class" "$time_zone" < "$file" >> "$jmeter_data_table"; then
			exit 1
		fi
		;;
	conf) ;;
	*) echo "[Warning] The file'$file' is ignored, because I don't know what it is.";;
	esac
fi
done

# generate charts
mkdir -p "$json_dir"
# generate charts from Jmeter
if [ -f "$jmeter_data_table" ]; then
	if [ -f "$input_dir/jmeter.conf" ]; then
		config_file_template="$input_dir/jmeter.conf"
	else
		config_file_template="$jmeter_default_config_file"
	fi
	sed "s/<!--{command_line_exclusion_pattern}-->/${exclusion_pattern}/g" "$config_file_template" > "$jmeter_dir/jmeter.conf"
	if ! $CGT_JAVA_COMMAND -jar "$perftest_generator" "$jmeter_dir/jmeter.conf" < "$jmeter_data_table" > "$jmeter_json_file"; then
		exit 1
	fi
fi

# generate system resource monitoring charts
for res_data_table in "$resource_monitoring_dir"/*.csv; do
if [ -f "$res_data_table" ]; then
	file_base_name=`basename "$res_data_table"`
	file_bare_name=${file_base_name%%.*}
	server_name=${file_bare_name%%_*}
	unset config_file_template
	if [ -f "$input_dir/$server_name.conf" ]; then
		config_file_template=$input_dir/$server_name.conf
	elif [ -f "$input_dir/res.template.conf" ]; then
		config_file_template=$input_dir/res.template.conf
	else
		config_file_template=$rm_default_config_file
	fi
	sed "s/<!--{server_name}-->/${server_name}/g" "$config_file_template" > "$resource_monitoring_dir/$server_name.conf"
	if ! $CGT_JAVA_COMMAND -jar "$perftest_generator" "$resource_monitoring_dir/$server_name.conf" < "$res_data_table" > "$json_dir/Resource-$server_name.json"; then
		exit 1
	fi
fi
done

# generate final report
js_file="$tmp_dir"/data.js
"$cgt_js" "$json_dir" "$js_file"
"$cgt_monoreport" "$js_file" "$report_template" "$report_file"


